public class AccountSupportScoreBatch implements Database.Batchable<SOBject>, Database.Stateful
{
    
    private String accountId;
    private Integer supportScore;
    private String priority;
    Map<Id, Account> mapOfAccSupportScore = new Map<Id, Account>();
    
	public Database.QueryLocator start(Database.BatchableContext bc)
    {
        List<Case> query = [SELECT AccountId, Status, Priority
            		   		FROM Case
                       		WHERE Status != 'Closed'];
        return Database.getQueryLocator(query);
    }
    
    public void execute(Database.BatchableContext bc, List<SObject> scope)
    {     
        for(SObject sc : scope)
        {
        	if(sc.accId != null)
            {
        		if(sc.priority == 'High')
				{
					supportScore = 3;
				}
				if(sc.priority == 'Medium')
				{
					supportScore = 2;
				}
				if(sc.priority == 'Low')
				{
					supportScore = 1;
				}
				
				if(createdDate < System.Today()-System.days(30))
				{
					supportScore = supportScore + 1;
				}
				else if(createdDate > System.Today()-System.days(60))
				{
					supportScore = supportScore - 1;
				}
				
				if(mapOfAccSupportScore.containsKey(accId))
				{
					mapOfAccSupportScore.Support_Score__c = mapOfAccSupportScore.Support_Score__c + supportScore;
				}
				else
				{
					mapOfAccSupportScore.put(accId, new Account(Id = accId, Support_Score__c = supportScore));   
				}        
            }
        }  
        
        if(!mapOfAccSupportScore.isEmpty())
        {
            update mapOfAccSupportScore.values();
        }
    }
    
    public void finish(Database.BatchableContext bc)
    {
        
    }
}